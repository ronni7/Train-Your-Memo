package hello;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.sql.Time;
import java.util.Arrays;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)

public class MainController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data

    @Autowired
    private UserRepository userRepository;
    @Autowired
    private ScoresRepository scoresRepository;
	/*public void initialize()
	{
		while(true)
		{
			System.out.println("Hello my friend");
			System.out.println("tell me what to do");
			this.addNewUser("Test","100");
			for (User u:this.getAllUsers()) {
				System.out.println(u.getId());
			System.out.println(u.getName());
			System.out.println(u.getScore());

			};
		}
	}*/

    @GetMapping(path = "/hello")
    public @ResponseBody
    String hello(){
        String hashed=BCrypt.hashpw("Password",BCrypt.gensalt());
        System.out.println("Hello hashed World: ");
        System.out.println("Is the same     "+BCrypt.checkpw("Password",hashed));
        return hashed;

      //  return "hello world";
    }

 /*   @GetMapping(path = "/playerByKey")
    public @ResponseBody //maybe activated also  here
    User findPlayerByKey(@RequestParam String login, @RequestParam String validationKey) {
        User u=userRepository.findByName(login);
        if(u!=null)
            if( BCrypt.checkpw(validationKey,  u.getValidationKey()))
                return u;
        return  null;


    }*/

    @GetMapping(path = "/add") // Map ONLY GET Requests
    public @ResponseBody
    boolean addNewScore
            (@RequestParam Time score,@RequestParam String login, @RequestParam String validationKey, @RequestParam String pack, @RequestParam LEVELS level) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
      //  try {
        System.out.println("score = [" + score + "], login = [" + login + "], validationKey = [" + validationKey + "], pack = [" + pack + "], level = [" + level + "]");
            User u=userRepository.findByLogin(login);




            if(u!=null ){

                if(BCrypt.checkpw(validationKey,u.getValidationKey())) {
                   System.out.println(u);
                Scores s = new Scores(u.getId(),score,pack,String.valueOf(level));
                  System.out.println(s);

                    // TODO: 2019-03-01 make score work


                    scoresRepository.save(s);
                    return true;
                }
            }
        /*} catch (NullPointerException e) {
            return false;
        }*/
        return false;

    }

    @GetMapping(path = "/bestScoreByLevel")
    public @ResponseBody
    BestScore bestScoreByKey(@RequestParam String login ,@RequestParam String validationKey, @RequestParam LEVELS level) {
      //  User u = this.findPlayerByKey(login,validationKey);
     //   System.out.println(scoresRepository.findScoresById(u.getId(), String.valueOf(level)));
/*if(u!=null && u.getActivated())
        return scoresRepository.findScoresById(u.getId(), String.valueOf(level));*/
        User u = userRepository.findByLogin(login);
        if (u != null )
            if(BCrypt.checkpw(validationKey,u.getValidationKey()))
                return scoresRepository.findScoresById(u.getId(),String.valueOf(level));


return null;
    }


    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<ListViewMapped> getAllScores(@RequestParam String login , @RequestParam String validationKey,@RequestParam LEVELS level) {

 /*      // Byte[] array=BoxByteArray(validationKey.getBytes());
        for (Byte aByte : array) {
            System.out.print(aByte);
        }
        System.out.println();*/
   //     User u = findPlayerByKey(login,validationKey);
User u = userRepository.findByLogin(login);
        if (u != null )
            if(BCrypt.checkpw(validationKey,u.getValidationKey()))
            return scoresRepository.findAllByLevel(String.valueOf(level));

            return null;
    }

   /* private Byte[] BoxByteArray(byte[] bytes) {
        Byte[] array=new Byte[bytes.length];
        for (int i = 0; i < bytes.length; i++) {
            array[i] = bytes[i];

        }
        return array;
    }*/

    @GetMapping(path = "/validateKey")
    public @ResponseBody
    boolean checkValidationKey(@RequestParam String login ,@RequestParam String validKey) {
        // TODO: 2019-02-28 better validation i guess

        User u = userRepository.findByLogin(login);
        if (u != null )
            if(BCrypt.checkpw(validKey,u.getValidationKey())){
            u.setActivated(true);
            userRepository.save(u);
            return true;
            }

return false;

    }

}